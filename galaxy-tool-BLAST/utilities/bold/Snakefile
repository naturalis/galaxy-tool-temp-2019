from subprocess import call, Popen, PIPE
import re

configfile: "config.yml"

rule all:
	input:
		"output/BOLD/bold_all_sequences_taxonomy.fa.nhr",
		"output/BOLD/bold_all_sequences_taxonomy_species_only_nodups.fa.nhr"

rule get_data:
	output:
		output_sequences = "output/bold_all_sequences.fa",
		output_taxonomy = "output/bold_all_taxonomy.tsv"
	params:
		arthropoda_fasta = config["arthropoda"]["fasta"],
		arthropoda_taxonomy = config["arthropoda"]["taxonomy"],
		fasta_folder = "output/bold_fasta_files",
		taxonomy_folder = "output/bold_taxonomy_files"
	log:
		log_error = "output/logs/log_error.txt",
		log_out = "output/logs/log_stdout.txt"
	run:
		shell("sh get_bold_sequences.sh {params.fasta_folder} >> {log.log_out} 2>> {log.log_error}")
		#Arthropoda fasta file is a known problem
		shell("rm -f {params.fasta_folder}/Arthropoda_sequences.fasta")
		#Copy manual downloaded Arthropoda fasta file to download folder
		shell("cp {params.arthropoda_fasta} {params.fasta_folder}/Arthropoda_sequences_manual.fasta")
		shell("cat {params.fasta_folder}/* > {output.output_sequences}")
		shell("sh get_bold_taxonomy.sh {params.taxonomy_folder} >> {log.log_out} 2>> {log.log_error}")
		#Arthropoda taxonomy file is a known problem
		shell("rm -f {params.taxonomy_folder}/Arthropoda_taxonomy.tsv")
		shell("cp {params.arthropoda_taxonomy} {params.taxonomy_folder}/Arthropoda_taxonomy_manual.tsv")
		shell("cat {params.taxonomy_folder}/* > {output.output_taxonomy}")
		#Do not uncomment these lines while developing
		#shell("rm -rf bold_fasta_files")
		#shell("rm -rf bold_taxonomy_files")

rule filter_and_check_sequences:
	input:
		rules.get_data.output.output_sequences
	output:
		fasta = "output/bold_all_sequences_filtered.fa",
		log = "output/logs/simplecheck_bold_sequences_log.txt"
	params:
		fasta_folder = "output/bold_fasta_files"
	run:
		#The BOLD API can give strange output, this is a quick check for that
		shell("sh simplecheck_bold_sequences.sh {params.fasta_folder} {output.log}")
		shell("sed -e '/^[^>]/ s/-//g' {input} > {output.fasta}")

rule filter_and_check_taxonomy:
	input:
		rules.get_data.output.output_taxonomy
	output:
		taxonomy = "output/bold_all_taxonomy_filtered.tsv",
		log = "output/logs/simplecheck_bold_taxonomy_log.txt"
	params:
		taxonomy_folder = "output/bold_taxonomy_files"
	run:
		shell("sh simplecheck_bold_taxonomy.sh {params.taxonomy_folder} {output.log}")
		shell("awk -F \"\t\" '{{print $1\"\t\"$10\"\t\"$12\"\t\"$14\"\t\"$16\"\t\"$20\"\t\"$22}}' {input} > {output.taxonomy}")

rule gbif_taxonomy:
	output:
		gbif_taxonomy = "output/gbif_taxonomy.tsv"
	log:
		log_error = "output/logs/log_error.txt",
		log_out = "output/logs/log_stdout.txt"
	run:
		shell("wget -P output http://rs.gbif.org/datasets/backbone/backbone-current.zip >> {log.log_out} 2>> {log.log_error}")
		shell("unzip -j output/backbone-current.zip \"Taxon.tsv\" -d output/ >> {log.log_out} 2>> {log.log_error}")
		shell("awk -F \"\t\" '{{print $18\"\t\"$19\"\t\"$20\"\t\"$21\"\t\"$22\"\t\"$23}}' output/Taxon.tsv > {output}")

rule create_database:
	input:
		bold_taxonomy = rules.filter_and_check_taxonomy.output.taxonomy,
		gbif_taxonomy = rules.gbif_taxonomy.output.gbif_taxonomy,
		bold_sequences = rules.filter_and_check_sequences.output.fasta
	output:
		fasta = "output/BOLD/bold_all_sequences_taxonomy.fa",
		blastdb = "output/BOLD/bold_all_sequences_taxonomy.fa.nhr"
	log:
		log_error = "output/logs/log_error.txt",
		log_out = "output/logs/log_stdout.txt"
	run:
		#shell("cat {input.gbif_taxonomy}")
		shell("python add_taxonomy_bold.py -t {input.bold_taxonomy} -g {input.gbif_taxonomy} -b {input.bold_sequences} -o {output.fasta} >> {log.log_out} 2>> {log.log_error}")
		shell("makeblastdb -in {output.fasta} -dbtype nucl")

rule create_filtered_database:
	input:
		bold_sequences = rules.create_database.output.fasta
	output:
		fasta = "output/BOLD/bold_all_sequences_taxonomy_species_only.fa",
		fasta_nodups = "output/BOLD/bold_all_sequences_taxonomy_species_only_nodups.fa",
		blastdb = "output/BOLD/bold_all_sequences_taxonomy_species_only_nodups.fa.nhr"
	log:
		log_error = "output/logs/log_error.txt",
		log_out = "output/logs/log_stdout.txt"
	run:
		shell("python filter_bold_for_species.py -b {input} -o {output.fasta} >> {log.log_out} 2>> {log.log_error}")
		shell("vsearch --derep_fulllength {output.fasta} --output {output.fasta_nodups}")
		shell("makeblastdb -in {output.fasta_nodups} -dbtype nucl >> {log.log_out} 2>> {log.log_error}")
